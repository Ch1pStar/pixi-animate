{"version":3,"sources":["../../src/animate/load.js"],"names":["load","options","parent","complete","basePath","stage","Object","assign","loader","PIXI","loaders","Loader","done","instance","addChild","assets","keys","length","id","add","once"],"mappings":";;;AAAA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;AAoBA,IAAMA,OAAO,SAAPA,IAAO,CAASC,OAAT,EAAkBC,MAAlB,EAA0BC,QAA1B,EAAoCC,QAApC,EAA8C;;AAEvD;AACA,QAAI,OAAOF,MAAP,KAAkB,UAAtB,EAAkC;AAC9BE,mBAAWD,QAAX;AACAA,mBAAWD,MAAX;AACAA,iBAAS,IAAT;AACH,KAJD,MAIO;AACH,YAAI,OAAOC,QAAP,KAAoB,QAAxB,EAAkC;AAC9BC,uBAAWD,QAAX;AACAA,uBAAW,IAAX;AACH;AACJ;;AAED,QAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AAC/BA,kBAAU;AACNI,mBAAOJ,OADD;AAENC,oBAAQA,MAFF;AAGNE,sBAAUA,YAAY,EAHhB;AAIND,sBAAUA;AAJJ,SAAV;AAMH;;AAEDF,cAAUK,OAAOC,MAAP,CAAc;AACpBF,eAAO,IADa;AAEpBH,gBAAQ,IAFY;AAGpBE,kBAAU,EAHU;AAIpBD,kBAAU;AAJU,KAAd,EAKPF,WAAW,EALJ,CAAV;;AAOA,QAAMO,SAAS,IAAIC,KAAKC,OAAL,CAAaC,MAAjB,EAAf;;AAEA,aAASC,IAAT,GAAgB;AACZ,YAAIC,WAAW,IAAIZ,QAAQI,KAAZ,EAAf;AACA,YAAIJ,QAAQC,MAAZ,EAAoB;AAChBD,oBAAQC,MAAR,CAAeY,QAAf,CAAwBD,QAAxB;AACH;AACD,YAAIZ,QAAQE,QAAZ,EAAsB;AAClBF,oBAAQE,QAAR,CAAiBU,QAAjB,EAA2BL,MAA3B;AACH;AACJ;;AAED;AACA,QAAIO,SAASd,QAAQI,KAAR,CAAcU,MAAd,IAAwB,EAArC;AACA,QAAIA,UAAUT,OAAOU,IAAP,CAAYD,MAAZ,EAAoBE,MAAlC,EAA0C;AACtC;AACA,YAAIb,YAAWH,QAAQG,QAAvB;AACA,YAAIA,SAAJ,EAAc;AACVA,yBAAY,GAAZ;AACH;AACD,aAAK,IAAIc,EAAT,IAAeH,MAAf,EAAuB;AACnBP,mBAAOW,GAAP,CAAWD,EAAX,EAAed,YAAWW,OAAOG,EAAP,CAA1B;AACH;AACDV,eAAOY,IAAP,CAAY,UAAZ,EAAwBR,IAAxB,EAA8BZ,IAA9B;AACH,KAVD,MAUO;AACH;AACAY;AACH;;AAED,WAAOJ,MAAP;AACH,CA5DD;;kBA8DeR,I","file":"load.js","sourcesContent":["/**\r\n * Load the stage class and preload any assets\r\n * @method PIXI.animate.load\r\n * @param {Object} options Options for loading.\r\n * @param {Function} options.stage Reference to the stage class\r\n * @param {Object} [options.stage.assets] Assets used to preload\r\n * @param {PIXI.Container} options.parent The Container to auto-add the stage to.\r\n * @param {String} [options.basePath] Base root directory\r\n * @return {PIXI.loaders.Loader} instance of PIXI resource loader\r\n */\r\n/**\r\n * Load the stage class and preload any assets\r\n * ```\r\n * let renderer = new PIXI.autoDetectRenderer(1280, 720);\r\n * let stage = new PIXI.Container();\r\n * PIXI.animate.load(lib.MyStage, function(instance){\r\n *     stage.addChild(instance);\r\n * });\r\n * function update() {\r\n *      renderer.render(stage);\r\n *      update();\r\n * }\r\n * update();\r\n * ```\r\n * @method PIXI.animate.load\r\n * @param {Function} StageRef Reference to the stage class.\r\n * @param {Object} [StageRef.assets] Assets used to preload.\r\n * @param {Function} complete The callback function when complete.\r\n * @return {PIXI.loaders.Loader} instance of PIXI resource loader\r\n */\r\n/**\r\n * Load the stage class and preload any assets\r\n * ```\r\n * let renderer = new PIXI.autoDetectRenderer(1280, 720);\r\n * let stage = new PIXI.Container();\r\n * PIXI.animate.load(lib.MyStage, stage);\r\n * function update() {\r\n *      renderer.render(stage);\r\n *      update();\r\n * }\r\n * update();\r\n * ```\r\n * @method PIXI.animate.load\r\n * @param {Function} StageRef Reference to the stage class.\r\n * @param {Object} [StageRef.assets] Assets used to preload.\r\n * @param {PIXI.Container} parent The Container to auto-add the stage to.\r\n * @param {String} [basePath] Base root directory\r\n * @return {PIXI.loaders.Loader} instance of PIXI resource loader\r\n */\r\n/**\r\n * Load the stage class and preload any assets\r\n * ```\r\n * let renderer = new PIXI.autoDetectRenderer(1280, 720);\r\n * let stage = new PIXI.Container();\r\n * PIXI.animate.load(lib.MyStage, stage);\r\n * function update() {\r\n *      renderer.render(stage);\r\n *      update();\r\n * }\r\n * update();\r\n * ```\r\n * @method PIXI.animate.load\r\n * @param {Function} StageRef Reference to the stage class.\r\n * @param {Object} [StageRef.assets] Assets used to preload.\r\n * @param {PIXI.Container} parent The Container to auto-add the stage to.\r\n * @param {Function} [complete] The callback function when complete.\r\n * @param {String} [basePath] Base root directory\r\n * @return {PIXI.loaders.Loader} instance of PIXI resource loader\r\n */\r\nconst load = function(options, parent, complete, basePath) {\r\n\r\n    // Support arguments (ref, complete, basePath)\r\n    if (typeof parent === \"function\") {\r\n        basePath = complete;\r\n        complete = parent;\r\n        parent = null;\r\n    } else {\r\n        if (typeof complete === \"string\") {\r\n            basePath = complete;\r\n            complete = null;\r\n        }\r\n    }\r\n\r\n    if (typeof options === \"function\") {\r\n        options = {\r\n            stage: options,\r\n            parent: parent,\r\n            basePath: basePath || \"\",\r\n            complete: complete\r\n        };\r\n    }\r\n\r\n    options = Object.assign({\r\n        stage: null,\r\n        parent: null,\r\n        basePath: '',\r\n        complete: null\r\n    }, options || {});\r\n\r\n    const loader = new PIXI.loaders.Loader();\r\n\r\n    function done() {\r\n        let instance = new options.stage();\r\n        if (options.parent) {\r\n            options.parent.addChild(instance);\r\n        }\r\n        if (options.complete) {\r\n            options.complete(instance, loader);\r\n        }\r\n    }\r\n\r\n    // Check for assets to preload\r\n    let assets = options.stage.assets || {};\r\n    if (assets && Object.keys(assets).length) {\r\n        // assetBaseDir can accept either with trailing slash or not\r\n        let basePath = options.basePath;\r\n        if (basePath) {\r\n            basePath += \"/\";\r\n        }\r\n        for (let id in assets) {\r\n            loader.add(id, basePath + assets[id]);\r\n        }\r\n        loader.once('complete', done).load();\r\n    } else {\r\n        // tiny case where there's only text and no shapes/animations\r\n        done();\r\n    }\r\n\r\n    return loader;\r\n};\r\n\r\nexport default load;\r\n"]}